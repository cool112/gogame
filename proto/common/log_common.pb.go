// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: log_common.proto

package common

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LogCommon_LogType int32

const (
	LogCommon_START_APP    LogCommon_LogType = 0
	LogCommon_UPDATE_START LogCommon_LogType = 1
	LogCommon_UPDATE_END   LogCommon_LogType = 2
	LogCommon_LOGIN        LogCommon_LogType = 3
	LogCommon_LOGIN_SUC    LogCommon_LogType = 4
	LogCommon_LOGIN_FAIL   LogCommon_LogType = 5
)

var LogCommon_LogType_name = map[int32]string{
	0: "START_APP",
	1: "UPDATE_START",
	2: "UPDATE_END",
	3: "LOGIN",
	4: "LOGIN_SUC",
	5: "LOGIN_FAIL",
}
var LogCommon_LogType_value = map[string]int32{
	"START_APP":    0,
	"UPDATE_START": 1,
	"UPDATE_END":   2,
	"LOGIN":        3,
	"LOGIN_SUC":    4,
	"LOGIN_FAIL":   5,
}

func (x LogCommon_LogType) String() string {
	return proto.EnumName(LogCommon_LogType_name, int32(x))
}
func (LogCommon_LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_log_common_58721a48c2eab9d1, []int{0, 0}
}

type LogCommon struct {
	Uid      string            `protobuf:"bytes,1,opt,name=Uid,proto3" json:"Uid,omitempty"`
	DeviceId string            `protobuf:"bytes,2,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
	Type     LogCommon_LogType `protobuf:"varint,3,opt,name=Type,proto3,enum=common.LogCommon_LogType" json:"Type,omitempty"`
	Msg      string            `protobuf:"bytes,4,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Time     int64             `protobuf:"varint,5,opt,name=Time,proto3" json:"Time,omitempty"`
	App      string            `protobuf:"bytes,6,opt,name=App,proto3" json:"App,omitempty"`
	ChanId   string            `protobuf:"bytes,7,opt,name=ChanId,proto3" json:"ChanId,omitempty"`
}

func (m *LogCommon) Reset()         { *m = LogCommon{} }
func (m *LogCommon) String() string { return proto.CompactTextString(m) }
func (*LogCommon) ProtoMessage()    {}
func (*LogCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_common_58721a48c2eab9d1, []int{0}
}
func (m *LogCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LogCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogCommon.Merge(dst, src)
}
func (m *LogCommon) XXX_Size() int {
	return m.Size()
}
func (m *LogCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_LogCommon.DiscardUnknown(m)
}

var xxx_messageInfo_LogCommon proto.InternalMessageInfo

func (m *LogCommon) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *LogCommon) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *LogCommon) GetType() LogCommon_LogType {
	if m != nil {
		return m.Type
	}
	return LogCommon_START_APP
}

func (m *LogCommon) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogCommon) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LogCommon) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *LogCommon) GetChanId() string {
	if m != nil {
		return m.ChanId
	}
	return ""
}

func init() {
	proto.RegisterType((*LogCommon)(nil), "common.LogCommon")
	proto.RegisterEnum("common.LogCommon_LogType", LogCommon_LogType_name, LogCommon_LogType_value)
}
func (m *LogCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogCommon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(m.Type))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(m.Time))
	}
	if len(m.App) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(len(m.App)))
		i += copy(dAtA[i:], m.App)
	}
	if len(m.ChanId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLogCommon(dAtA, i, uint64(len(m.ChanId)))
		i += copy(dAtA[i:], m.ChanId)
	}
	return i, nil
}

func encodeVarintLogCommon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovLogCommon(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovLogCommon(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLogCommon(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovLogCommon(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovLogCommon(uint64(m.Time))
	}
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovLogCommon(uint64(l))
	}
	l = len(m.ChanId)
	if l > 0 {
		n += 1 + l + sovLogCommon(uint64(l))
	}
	return n
}

func sovLogCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogCommon(x uint64) (n int) {
	return sovLogCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LogCommon_LogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("log_common.proto", fileDescriptor_log_common_58721a48c2eab9d1) }

var fileDescriptor_log_common_58721a48c2eab9d1 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xcd, 0x4a, 0xf3, 0x40,
	0x18, 0x85, 0x33, 0xf9, 0xeb, 0x97, 0x97, 0xcf, 0x32, 0xcc, 0x42, 0x46, 0x17, 0x43, 0xe8, 0x2a,
	0x1b, 0xbb, 0xd0, 0x2b, 0x18, 0x93, 0x2a, 0x81, 0xb4, 0x86, 0x34, 0x59, 0x07, 0x6d, 0x42, 0x0c,
	0x98, 0xce, 0x60, 0x45, 0xf0, 0x2e, 0xbc, 0x02, 0xaf, 0xc7, 0x65, 0x97, 0x2e, 0x25, 0xb9, 0x11,
	0x99, 0x49, 0xe8, 0xee, 0x3c, 0x87, 0x67, 0xce, 0x0b, 0x03, 0xf8, 0x45, 0x34, 0xe5, 0x4e, 0x74,
	0x9d, 0xd8, 0x2f, 0xe5, 0xab, 0x78, 0x13, 0xc4, 0x1d, 0x69, 0xf1, 0x65, 0x82, 0x97, 0x88, 0x26,
	0xd4, 0x44, 0x30, 0x58, 0x45, 0x5b, 0x51, 0xe4, 0xa3, 0xc0, 0xcb, 0x54, 0x24, 0x97, 0xf0, 0x2f,
	0xaa, 0xdf, 0xdb, 0x5d, 0x1d, 0x57, 0xd4, 0xd4, 0xf5, 0x89, 0xc9, 0x15, 0xd8, 0xf9, 0x87, 0xac,
	0xa9, 0xe5, 0xa3, 0x60, 0x7e, 0x7d, 0xb1, 0x9c, 0x0e, 0x9c, 0xe6, 0x54, 0x52, 0x42, 0xa6, 0x35,
	0x35, 0xbe, 0x3e, 0x34, 0xd4, 0x1e, 0xc7, 0xd7, 0x87, 0x86, 0x10, 0xb0, 0xf3, 0xb6, 0xab, 0xa9,
	0xe3, 0xa3, 0xc0, 0xca, 0x74, 0x56, 0x16, 0x97, 0x92, 0xba, 0xa3, 0xc5, 0xa5, 0x24, 0xe7, 0xe0,
	0x86, 0xcf, 0x8f, 0xfb, 0xb8, 0xa2, 0x33, 0x5d, 0x4e, 0xb4, 0xa8, 0x60, 0x36, 0x1d, 0x20, 0x67,
	0xe0, 0x6d, 0x73, 0x9e, 0xe5, 0x25, 0x4f, 0x53, 0x6c, 0x10, 0x0c, 0xff, 0x8b, 0x34, 0xe2, 0xf9,
	0xaa, 0xd4, 0x2d, 0x46, 0x64, 0x0e, 0x30, 0x35, 0xab, 0x4d, 0x84, 0x4d, 0xe2, 0x81, 0x93, 0x3c,
	0xdc, 0xc7, 0x1b, 0x6c, 0xa9, 0xb7, 0x3a, 0x96, 0xdb, 0x22, 0xc4, 0xb6, 0x32, 0x47, 0xbc, 0xe3,
	0x71, 0x82, 0x9d, 0x5b, 0xfa, 0xdd, 0x33, 0x74, 0xec, 0x19, 0xfa, 0xed, 0x19, 0xfa, 0x1c, 0x98,
	0x71, 0x1c, 0x98, 0xf1, 0x33, 0x30, 0xe3, 0xc9, 0xd5, 0x3f, 0x79, 0xf3, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x7f, 0x59, 0x5b, 0x1b, 0x5d, 0x01, 0x00, 0x00,
}
